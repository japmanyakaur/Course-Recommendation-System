# -*- coding: utf-8 -*-
"""COURSE RECOMMENDATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16pcBsLdtr30kdBQepyqIIMItVqiyKGlq
"""

# IMPORTING LIBRARIES
import pandas as pd
import re
import numpy as np
from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

# LOADING THE DATASET
df = pd.read_csv(r"/content/udemy_courses.csv")


title_col = 'headline'
tags_col = 'objectives'
desc_col = 'curriculum'

# TEXT CLEANING
def simple_clean(text):
    text = str(text).lower()
    text = re.sub(r'[^a-zA-Z0-9\s]', '', text)
    tokens = text.split()
    tokens = [t for t in tokens if t not in ENGLISH_STOP_WORDS]
    return ' '.join(tokens)


df['combined'] = df[title_col].fillna('') + ' ' + df[tags_col].fillna('') + ' ' + df[desc_col].fillna('')
df['cleaned'] = df['combined'].apply(simple_clean)

#  SENTENCE TRANSFORMER MODEL
model = SentenceTransformer('all-MiniLM-L6-v2')

#  BATCH ENCODING
def batch_encode(texts, batch_size=64):
    all_embeddings = []
    for i in range(0, len(texts), batch_size):
        batch = texts[i:i+batch_size]
        emb = model.encode(batch, show_progress_bar=False)
        all_embeddings.extend(emb)
    return np.array(all_embeddings)

print("ðŸ”„ Encoding all course descriptions...")
embeddings = batch_encode(df['cleaned'].tolist())

#  RECOMMENDATION FUNCTION
def recommend_courses(user_input, df, embeddings, top_n=5):
    user_input_clean = simple_clean(user_input)
    user_embedding = model.encode([user_input_clean])
    similarities = cosine_similarity(user_embedding, embeddings)[0]
    top_indices = similarities.argsort()[::-1][:top_n]


    recommended = df.iloc[top_indices][['title', 'url']].copy()
    recommended['score'] = similarities[top_indices]

    print(f"\n Recommended Courses for: '{user_input}'\n")
    for idx, row in recommended.iterrows():
        print(f" {row['title']}  â€”  Score: {row['score']:.3f}  â€”  {row['url']}")

    return recommended.reset_index(drop=True)


#  EXAMPLE USE
query = "dsa in c++ and java for beginners"


results = recommend_courses(query, df, embeddings)

print("\n Top Course Recommendations for:", query)
print(results.to_string(index=False))

